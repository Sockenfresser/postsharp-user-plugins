#summary Describes how to start using Log4PostSharp

= Introduction =

Log4PostSharp contains an aspect which uses PostSharp to inject MSIL code that writes messages to log4net log.
This page describes shortly how to get started using it.


= Details =

Code injected by Log4PostSharp can log three kinds of messages:
  * when a method is entered,
  * when a method is exited without throwing exception,
  * when a method throws an exception.

== Per method ==

The only thing that developer has to do is to decorate a method with `LogAttribute` and provide values for few attribute properties, like in the following example:

{{{
[Log(LogLevel.Info, "Counting characters.")]
int CountCharacters(string arg) {
   return arg.Length;
}
}}}

This would cause that when the method is entered, "Counting characters." message is logged with severity level of `Info`. Also, if exception occurs in the method, it would be logged with level of `Error`.

== Per multiple methods (`Multicast`) ==

In most cases it is desirable to add the following line to project's `AssemblyInfo.cs` file:

{{{
[assembly: Log(AttributeTargetTypes = "*", EntryLevel = LogLevel.Debug, ExitLevel = LogLevel.Debug, ExceptionLevel = LogLevel.Error)]
}}}

This causes that all three kinds of events are logged and method signatures are appended to log messages.

= Final Note =

Use `Multicast` feature of the PostSharp to apply the attribute to all methods in order to log messages with `Debug` level. Besides of this you may additionally decorate chosen methods with `Info` level to log more important messages.

Log4PostSharp does not require any specific log4net configuration - configure it your usual way.